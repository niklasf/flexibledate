<?php
// $Id$

/**
 * @file
 * Defines the flexibledate field type.
 */

/**
 * Implement hook_field_info().
 */
function flexibledate_field_info() {
  return array(
    'flexibledate_date' => array(
      'label' => t('Flexibledate'),
      'description' => t('Stores a full date or a quarter.'),
      'default_widget' => 'flexibledate_textfield',
      'default_formatter' => 'flexibledate_plaintext',
    ),
  );
}

/**
 * Implement hook_field_schema().
 */
function flexibledate_field_schema($field) {
  return array(
    'columns' => array(
      'value' => array(
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
  );
}

/**
 * Implement hook_field_schema().
 */
function flexibledate_field_validate($obj_type, $object, $field, $instance, $langcode, &$items, &$errors) {
  foreach ($items as $delta => $item) {
    if (isset($item['value'])) {
      if (_flexibledate_to_values($item['value']) === FALSE) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'flexibledate_invalid',
          'message' => t('A valid date is <em>dd.mm.yyyy.</em>. A valid quarter is <em>q/yyyy</em>'),
        );
      }
    }
  }
}

/**
 * Implement hook_field_is_empty().
 */
function flexibledate_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implement hook_field_formatter_info().
 */
function flexibledate_field_formatter_info() {
  return array(
    'flexibledate_plaintext' => array(
      'label' => t('Plaintext'),
      'field types' => array('flexibledate_value'),
    ),
  );
}

/**
 * Implement hook_field_formatter_view().
 */
function flexibledate_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  if ($display['type'] = 'flexibledate_plaintext') {
    foreach ($items as $delta => $item) {
      $element[$delta] = _flexibledate_to_text($item['value']);
    }
  }
  
  return $element;
}

/**
 * Implement hook_field_widget_info().
 */
function flexibledate_field_widget_info() {
  return array(
    'flexibledate_textfield' => array(
      'label' => t('Textfield'),
      'field types' => array('flexibledate_date'),
    ),
  );
}

/**
 * Implement hook_field_widget().
 */
function flexibledate_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta = 0) {
  $element = array(
    '#type' => 'textfield',
    '#element_validate' => array('_flexibledate_textfield_validate'),
    '#langcode' => $langcode, // TODO: Check if #langcode is necessary
    '#size' => 10,
  );
  
  if (isset($items[$delta])) {
    $element['#default_value'] = _flexibledate_to_text($items[$delta]['value']);
  }
  
  return $element;
}

/**
 * FAPI validation callback.
 * Convert the entered text to something that can be stored in the database.
 */
function _flexibledate_textfield_validate($element, &$form_state) {
  print '<pre>' . var_dump($element) . '</pre>';
}

/**
 * Implement hook_field_widget_error().
 */
function flexibledate_field_widget_error($element, $error) {
  switch ($error['error']) {
    case 'flexibledate_invalid':
      form_error($element, $error['message']);
      break;
  }
}

/**
 * Convert text to a flexibledate value
 */
function _flexibledate_from_text($text) {
  if (preg_match('/^\s*(\d{1,2})\.(\d{1,2})\.(\d{2}|\d{4})\s*$/', $text, $matches)) {
    return _flexibledate_from_values($matches[3], $matches[2], $matches[1]);
  } else if (preg_match('/^\s*0?([1-4])\s*\/\s*(\d{2}|\d{4})\s*$/', $text, $matches)) {
    return _flexibledate_from_values($matches[2], $matches[1]);
  } else {
    return FALSE;
  }
}

/**
 * Convert values to a flexibledate value
 */
function _flexibledate_from_values($year, $q, $day = FALSE) {
  // If a day is given, then $q is a month, otherwise a quarter
  $fulldate = $day !== FALSE ? 1 : 0;
  
  // All parameters are integers
  $year = intval($year);
  $q = intval($q);
  $day = intval($day);
  
  // Validate year
  if ($year > 70 && $year <= 99) {
    $year += 1900;
  } else if ($year > 0 && $year <= 70) {
    $year += 2000;
  }
  if ($year < 1970 || $year > date('Y') + 50) {
    return FALSE;
  }
  
  if ($fulldate) { // A day is given, so $q is the month
    // Validate month
    if ($q < 1 || $q > 12) {
      return FALSE;
    }
    
    // The maximum days of a month (no leap year)
    $maxdays = array(0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);
    
    // Leap years
    if ($year % 400 == 0 || ($year % 4 == 0 && $year % 100 != 0)) {
      $maxdays[2] = 29;
    }
    
    // Validate day
    if ($day < 1 || $day > $maxdays[$q]) {
      return FALSE;
    }
  } else { // No day is given, so $q is the quarter
    // Validate the quarter
    if ($q < 1 || $q > 4) {
      return FALSE;
    }
    
    $q = $q * 3 - 2; // Now lets make a month from it anyway
    $day = 1; // And a valid day
  }
  
  // Create a unix timestamp
  return mktime(
    1, // hour
    0, // minute
    !$fulldate, // secound - used as a marker
    $q, // month
    $day, // day
    $year // year
  );
}

/**
 * Convert a flexibledate value to text
 */
function _flexibledate_to_text($value) {
  if ($value === FALSE || $value === NULL) {
    return '';
  }
  
  $value = intval($value);
  
  if ($value % 2 == 0) { // Full date
    return date('d.m.Y', $value);
  } else { // Quarter
    return ((date('m', $value) + 2) / 3) . '/' . date('Y', $value);
  }
}

/**
 * Convert a flexibledate value to an array that has these indexes:
 * - year
 * - month
 * - day
 * - quarter
 * Either year, month and day ar set or year and quarter.
 * FALSE for no valid flexibledate.
 */
function _flexibledate_to_values($value) {
  if ($value === FALSE || $value === NULL) {
    return FALSE;
  }
  
  $value = intval($value);
  
  if ($value % 2 == 0) { // Full date
    return array(
      'year' => intval(date('Y', $value)),
      'month' => intval(date('m', $value)),
      'day' => intval(date('d', $value)),
    );
  } else { // Quarter
    return array(
      'year' => intval(date('Y', $value)),
      'quarter' => (date('m', $value) + 2) / 3,
    );
  }
}
