<?php

/**
 * @file
 * Defines the flexibledate field type.
 */

/**
 * Indicates a full date.
 */
define('FLEXIBLEDATE_DATE', 0);

/**
 * Indicates a year with a quarter.
 */
define('FLEXIBLEDATE_QUARTER', 1);

/**
 * Indicates only a year.
 */
define('FLEXIBLEDATE_YEAR', 2);

/**
 * Represents a flexibledate value.
 */
class Flexibledate {

  /**
   * The internal value as stored in the database or FALSE if an invalid value
   * is represented.
   */
  protected $value;

  /**
   * Creates a Flexibledate instance.
   *
   * @param $value
   *   The value as stored in the database.
   */
  public function __construct($value) {
    $this->value = $value;
  }

  /**
   * @return
   *  If the encapsulated value is empty or not.
   */
  public function isEmpty() {
    return $this->value === NULL;
  }

  /**
   * @return
   *  If teh encapsulated value is valid or not.
   */
  public function isValid() {
    return $this->value !== FALSE;
  }

  /**
   * @return
   *  The value as stored in the database.
   */
  public function getValue() {
    return $this->value;
  }

  /**
   * @return
   *  NULL, FALSE, FLEXIBLEDATE_YEAR, FLEXIBLEDATE_QUARTER; FLEXIBLEDATE_DATE
   *  if empty, invalid, a year, a quarter or a date.
   */
  public function getType() {
    if ($this->value === NULL || $this->value === FALSE) {
      return $this->value;
    }

    return substr($this->value, -1);
  }

  /**
   * @return
   *  The year. NULL or FALSE if empty or invalid.
   */
  public function getYear() {
    if ($this->value === NULL || $this->value === FALSE) {
      return $this->value;
    }

    return date('Y', $this->value);
  }

  /**
   * @return
   *  The quarter (1, 2, 3, 4) of the year. NULL or FALSE if empty ro invalid.
   */
  public function getQuarter() {
    if ($this->value === NULL || $this->value === FALSE) {
      return $this->value;
    }

    switch (date('m', $this->value)) {
      case 1:
      case 2:
      case 3:
        return 1;
      case 4:
      case 5:
      case 6:
        return 2;
      case 7:
      case 8:
      case 9:
        return 3;
      case 10:
      case 11:
      case 12:
        return 4;
    }
  }

  /**
   * @return
   *  The string representation of the stored value or FALSE if invalid.
   */
  public function toString() {
    if ($this->value === NULL) {
      return '';
    }

    if ($this->value === FALSE) {
      return FALSE;
    }

    switch ($this->getType()) {
      case FLEXIBLEDATE_DATE:
        return date('d.m.Y', $this->value);
      case FLEXIBLEDATE_QUARTER:
        return $this->getQuarter() . '/' . $this->getYear();
      case FLEXIBLEDATE_YEAR:
        return $this->getYear();
    }
  }

  /**
   * Validates a quarter.
   *
   * @param $quarter
   *  The quarter (1, 2, 3, 4).
   *
   * @return
   *  TRUE if valid.
   */
  public static function checkQuarter($quarter) {
    $quarter = intval($quarter);
    return $quarter >= 1 && $quarter <= 4;
  }

  /**
   * Validates a year.
   *
   * @param $year
   *  The year, i.e. 1967.
   *
   * @return
   *  TRUE if valid.
   */
  public static function checkYear($year) {
    $year = intval($year);
    return $year >= 1900 && $year <= date('Y', REQUEST_TIME) + 100;
  }

  /**
   * Creates a Flexibledate instance from a given year.
   *
   * @param $year
   *  The year.
   *
   * @return
   *  The related Flexibledate instance.
   */
  public static function createFromYear($year) {
    if (!self::checkYear($year)) {
      return self::createInvalid();
    }

    return new Flexibledate(mktime(
      1, // hour
      0, // minute
      FLEXIBLEDATE_YEAR, // second, used as a marker
      1, // month
      1, // day
      $year
    ));
  }

  /**
   * Creates a Flexibledate instance from a given quarter and year.
   *
   * @param $quarter
   *  The quarter (1, 2, 3, 4) of the year.
   * @param $year
   *  The year.
   *
   * @return
   *  The related Flexibledate instance.
   */
  public static function createFromQuarter($quarter, $year) {
    if (!self::checkYear($year) || !self::checkQuarter($quarter)) {
      return self::createInvalid();
    }

    return new Flexibledate(mktime(
      1, // hour
      0, // minute
      FLEXIBLEDATE_QUARTER, // second, used as a marker
      $quarter * 3 - 2, // first month of the quarter
      1,
      $year
    ));
  }

  /**
   * Creates a Flexibledate instance from a given day, month and year.
   *
   * @param $day
   *  The day of the month.
   * @param $month
   *  The month.
   * @param $year
   *  The year.
   *
   * @return
   *  The related Flexibledate instance.
   */
  public static function createFromDate($day, $month, $year) {
    if (!self::checkYear($year) || !checkdate($month, $day, $year)) {
      return self::createInvalid();
    }

    return new Flexibledate(mktime(
      1, // hour
      0, // minute
      FLEXIBLEDATE_DATE, // second, used as a marker
      $month,
      $day,
      $year
    ));
  }

  /**
   * Creates a Flexibledate instance from values of the old Consolero database.
   *
   * @param $releasedate
   *  The releasedate column of the games table as a string, i.e. 2013-00-00.
   * @param $releaseq = 0
   *  The releaseq column of the games table.
   *
   * @return
   *  The related Flexibledate instance.
   */
  public static function createFromOldDatabase($releasedate, $releaseq = 0) {
    if (!$releasedate || $releasedate == '0000-00-00') {
      return self::createEmpty();
    }

    list($year, $month, $day) = explode('-', $releasedate, 3);

    if ($releaseq) {
      return self::createFromQuarter($releaseq, $year);
    }

    if ($month == 0 || $day == 0) {
      return self::createFromYear($year);
    }

    return self::createFromDate($day, $month, $year);
  }

  /**
   * Parses a string to create a Flexibledate instance.
   *
   * @param $string
   *  The input string.
   *
   * @return
   *  The related Flexibledate instance. In the case of a parser error an
   *  invalid instance will be created. Use the isValid() method to check.
   */
  public static function createFromString($string) {
    $string = trim($string);

    if ($string === '') {
      return self::createEmpty();
    }

    if (preg_match('/^[0-9]{4}$/', $string)) {
      return self::createFromYear($string);
    }

    if (preg_match('/^([1-4])\/([0-9]{4})$/', $string, $match)) {
      return self::createFromQuarter($match[1], $match[2]);
    }

    if (preg_match('/^([0-9]{1,2})\.([0-9]{1,2})\.([0-9]{4})$/', $string, $match)) {
      return self::createFromDate($match[1], $match[2], $match[3]);
    }

    return self::createInvalid();
  }

  /**
   * Creates a Flexibledat instance from the field value array.
   *
   * @param $item
   *  The field value array with $item['value'] set.
   *
   * @return
   *  The related Flexibledate instance.
   */
  public static function createFromItem($item) {
    return new Flexibledate($item['value']);
  }

  /**
   * @return
   *  An empty Flexibldate instance.
   */
  public static function createEmpty() {
    return new Flexibledate(NULL);
  }

  /**
   * @return
   *  An invalid Flexibldate instance.
   */
  public static function createInvalid() {
    return new Flexibledate(FALSE);
  }
}

/**
 * Implements hook_field_info().
 */
function flexibledate_field_info() {
  return array(
    'flexibledate_date' => array(
      'label' => t('Flexibledate'),
      'description' => t('Stores a full date or a quarter.'),
      'default_widget' => 'flexibledate_textfield',
      'default_formatter' => 'flexibledate_plaintext',
    ),
  );
}

/**
 * Implements hook_field_schema().
 */
function flexibledate_field_schema($field) {
  return array(
    'columns' => array(
      'value' => array(
        'type' => 'int',
        'not null' => FALSE,
      ),
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function flexibledate_field_validate($obj_type, $object, $field, $instance, $langcode, &$items, &$errors) {
  foreach ($items as $delta => $item) {
    if (isset($item['value'])) {
      if (!Flexibledate::createFromItem($item)->isValid()) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'flexibledate_invalid',
          'message' => t('A valid date is <em>dd.mm.yyyy</em>. A valid quarter is <em>q/yyyy</em>. A valid year if <em>yyyy</em>.'),
        );
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function flexibledate_field_is_empty($item, $field) {
  return Flexibledate::createFromItem($item)->isEmpty();
}

/**
 * Implements hook_field_formatter_info().
 */
function flexibledate_field_formatter_info() {
  return array(
    'flexibledate_plaintext' => array(
      'label' => t('Plaintext'),
      'field types' => array('flexibledate_value'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function flexibledate_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] = 'flexibledate_plaintext') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array('#markup' => Flexibledate::createFromItem($item)->toString());
    }
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function flexibledate_field_widget_info() {
  return array(
    'flexibledate_textfield' => array(
      'label' => t('Textfield'),
      'field types' => array('flexibledate_date'),
    ),
  );
}

/**
 * Implements hook_field_widget().
 */
function flexibledate_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => 'textfield',
    '#size' => 10,
    '#element_validate' => array('_flexibledate_textfield_validate'),
  );

  if (isset($items[$delta])) {
    $element['#default_value'] = Flexibledate::createFromItem($items[$delta])->toString();
  }

  return $element;
}

/**
 * FAPI validation callback.
 * Converts the entered text to something that can be stored in the database.
 */
function _flexibledate_textfield_validate($element, &$form_state) {
  $value = Flexibledate::createFromString($element['#value'])->getValue();
  form_set_value($element, array('value' => $value), $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function flexibledate_field_widget_error($element, $error) {
  switch ($error['error']) {
    case 'flexibledate_invalid':
      form_error($element, $error['message']);
      break;
  }
}
