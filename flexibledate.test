<?php

/**
 * @file
 * Tests for the Flexibledate module.
 */

/**
 * Unit tests for the Flexibledate class.
 */
class FlexibledateUnitTestCase extends DrupalUnitTestCase {

  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Flexibledate unit tests'),
      'description' => t('Unit tests for the Flexibledate class.'),
      'group' => t('Flexibledate'),
    );
  }

  /**
   * Implements setUp().
   */
  public function setUp() {
    parent::setUp();
    module_load_include('module', 'flexibledate');
  }

  /**
   * Test special values.
   */
   public function testSpecialValues() {
     $empty = Flexibledate::createEmpty();
     $this->assertTrue($empty->isEmpty());
     $this->assertTrue($empty->isValid());
     $this->assertIdentical($empty->toString(), '');
   }

   /**
    * Test string parsing.
    */
  public function testStringParsing() {
    $year_only = Flexibledate::createFromString('2009 ');
    $this->assertFalse($year_only->isEmpty());
    $this->assertTrue($year_only->isValid());
    $this->assertEqual($year_only->toString(), '2009');
    $this->assertEqual($year_only->getYear(), 2009);
    $this->assertEqual($year_only->getType(), FLEXIBLEDATE_YEAR);

    $empty = Flexibledate::createFromString('   ');
    $this->assertTrue($empty->isEmpty());
    $this->assertTrue($empty->isValid());
    $this->assertIdentical($empty->toString(), '');

    $quarter = Flexibledate::createFromString(' 4/2012');
    $this->assertTrue($quarter->isValid());
    $this->assertFalse($quarter->isEmpty());
    $this->assertEqual($quarter->getQuarter(), 4);
    $this->assertEqual($quarter->getYear(), 2012);
    $this->assertEqual($quarter->toString(), '4/2012');

    $date = Flexibledate::createFromString(' 24.5.2000');
    $this->assertTrue($date->isValid());
    $this->assertFalse($date->isEmpty());
    $this->assertEqual($date->getYear(), 2000);
    $this->assertEqual($date->getQuarter(), 2);
    $this->assertEqual($date->toString(), '24.05.2000');

    $invalid = Flexibledate::createFromString('-');
    $this->assertFalse($invalid->isValid());
    $this->assertFalse($invalid->isEmpty());
    $this->assertIdentical($invalid->toString(), FALSE);
  }

  /**
   * Test invalid dates.
   */
  public function testInvalidDates() {
    $invalid = Flexibledate::createFromString('99.12.2000');
    $this->assertFalse($invalid->isValid());

    $invalid = Flexibledate::createFromString('06/2007');
    $this->assertFalse($invalid->isValid());

    $invalid = Flexibledate::createFromString('29.02.2003');
    $this->assertFalse($invalid->isValid());

    $invalid = Flexibledate::createFromDate(31, 09, 2011);
    $this->assertFalse($invalid->isValid());

    // This one is valid because of the leap year.
    $valid = Flexibledate::createFromString('29.02.2000');
    $this->assertTrue($valid->isValid());
  }
}
